import { createSignal as t, createComputed as n, For as e } from "solid-js";import { template as o, delegateEvents as r, setAttribute as i, memo as c, addEventListener as l, style as s, effect as u, insert as d, createComponent as a } from "solid-js/web";export default {};const v = o("<table><thead><tr></tr></thead><tbody></tbody></table>", 8),f = o("<th></th>", 2),b = o("<tr></tr>", 2),h = o("<td></td>", 2),m = o('<span class="sort-icon"></span>', 2);function p(o) {var r;const [c, p] = t(),[S, j] = t(o.rows, !1);function D() {const t = c();return void 0 !== t ? t : void 0 !== o.defaultSortDirection ? o.defaultSortDirection : [null, null];}n(() => {j(o.rows);});const C = null !== (r = o.rowSorter) && void 0 !== r ? r : _;function R() {const t = D();null === t[0] && void 0 !== o.defaultSortDirection ? j(C(S(), o.defaultSortDirection)) : null !== t[0] && j(C(S(), t));}const { headerRenderer: x = $, bodyRenderer: O = w, getRowID: A = k, accessors: I } = o;return void 0 === o.columns && (o.columns = function (t, n = 0) {const e = t[n],o = Object.keys(e),r = o.length,i = new Array(r);for (let t = 0; t < r; t++) i[t] = { id: o[t] };return i;}(o.rows, o.representitiveRowNumber)), R(), (() => {const t = v.cloneNode(!0),n = t.firstChild,r = n.firstChild,c = n.nextSibling;return d(r, a(e, { get each() {return o.columns;}, children: t => {const n = !1 !== t.sortable;return (() => {const e = f.cloneNode(!0);var o;return l(e, "click", n ? (o = t.id, t => {p(function (t, n, e) {let o;return o = e ? [null, null] : t[0] === n ? [t[0], "asc" === t[1] ? "desc" : "asc"] : [n, "asc"], o;}(D(), o, t.shiftKey)), R();}) : void 0, !0), e.className = n ? "sortable" : void 0, d(e, () => x(t), null), d(e, () => n ? function (t, n) {let e;e = null === t[0] || t[0] !== n ? N : "asc" === t[1] ? g : y;return (() => {const t = m.cloneNode(!0);return d(t, e), t;})();}(D(), t.id) : void 0, null), u(() => i(e, "id", I ? String(t.id) : void 0)), e;})();} })), d(c, a(e, { get each() {return S();}, children: t => {const n = function (t) {return I ? A(t) : void 0;}(t);return (() => {const r = b.cloneNode(!0);return i(r, "id", n), d(r, a(e, { get each() {return o.columns;}, children: e => (() => {const o = h.cloneNode(!0);return l(o, "click", void 0 !== e.onClick ? n => e.onClick(n, t) : void 0, !0), d(o, () => O(t, e.id)), u(() => i(o, "id", n ? `${n}.${e.id}` : void 0)), o;})() })), r;})();} })), u(n => {var e;const r = `solid-simple-table ${null !== (e = o.className) && void 0 !== e ? e : ""}`,i = o.style;return r !== n._v$ && (t.className = n._v$ = r), n._v$2 = s(t, i, n._v$2), n;}, { _v$: void 0, _v$2: void 0 }), t;})();}export { p as SimpleTable };const y = "↑",g = "↓",N = "⇅";function S(t) {return "string" == typeof t ? t : JSON.stringify(t);}function $(t) {var n;return null !== (n = t.label) && void 0 !== n ? n : t.id;}function w(t, n) {return S("object" == typeof t ? t[n] : t);}function k(t) {return S(t);}function _(t, n) {if (!t.length) return t;let e;const o = n[0];return e = "object" == typeof t[0] ? t.sort((t, n) => {const e = t[o],r = n[o];return e === r ? 0 : e < r ? -1 : 1;}) : t.sort(), "desc" === n[1] ? e.reverse() : e;}r(["click"]);