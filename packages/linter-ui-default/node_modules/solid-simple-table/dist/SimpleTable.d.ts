import { JSX } from "solid-js";
export type Renderable = any;
export type IndexType = string | number;
export type Row = number | string | Record<IndexType, any>;
export type Column<K extends IndexType = IndexType> = {
    id: K;
    label?: string;
    sortable?: boolean;
    onClick?(e: MouseEvent, row: Row): void;
};
/**
 * Sort direction. It is a tuple:
 *
 * @type is The direction of the sort
 * @columnID is the key used for sorting
 */
export type NonNullSortDirection<K extends IndexType = IndexType> = [columnID: K, type: "asc" | "desc"];
export type SortDirection<K extends IndexType = IndexType> = NonNullSortDirection<K> | [columnID: null, type: null];
export type Props<K extends IndexType> = {
    rows: Array<Row>;
    columns?: Array<Column<K>>;
    /**
     * If columns is not provided and Row is an object, construct columns based on this row Takes this Row's keys as Column IDs
     *
     * @default 0 (first row)
     */
    representitiveRowNumber?: number;
    headerRenderer?(column: Column): string | Renderable;
    bodyRenderer?(row: Row, columnID: K): string | Renderable;
    style?: JSX.CSSProperties | string;
    className?: string;
    defaultSortDirection?: NonNullSortDirection<K>;
    rowSorter?(rows: Array<Row>, sortDirection: NonNullSortDirection<K>): Array<Row>;
    /**
     * Set to true if you want column, row, and cell accessors
     *
     * @default false
     */
    accessors?: boolean;
    /**
     * A function that takes row and returns string unique key for that row
     *
     * @default {defaultGetRowID}
     */
    getRowID?(row: Row): string;
};
export type SortDirectionSignal<K extends IndexType = IndexType> = SortDirection<K> | undefined;
export type RowsSignal = Array<Row>;
export function SimpleTable(props: Props<IndexType>): import("solid-js").JSX.Element;

//# sourceMappingURL=SimpleTable.d.ts.map
