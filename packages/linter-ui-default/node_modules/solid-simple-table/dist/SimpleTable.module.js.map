{"mappings":"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","sources":["./src/SimpleTable.tsx"],"sourcesContent":["import { createSignal, createComputed, For } from \"solid-js\"\r\nimport \"./SimpleTable.less\" // eslint-disable-line import/no-unassigned-import\r\nimport {\r\n  Props,\r\n  IndexType,\r\n  SortDirectionSignal,\r\n  RowsSignal,\r\n  SortDirection,\r\n  NonNullSortDirection,\r\n  Row,\r\n  Column,\r\n} from \"./SimpleTable.types\"\r\n\r\nexport * from \"./SimpleTable.types\"\r\n\r\nexport function SimpleTable(props: Props<IndexType>) {\r\n  const [getSortDirectionSignal, setSortDirection] = createSignal<SortDirectionSignal>()\r\n  const [getRows, setRows] = createSignal<RowsSignal>(props.rows, false)\r\n\r\n  // update the local copy whenever the parent updates\r\n  createComputed(() => {\r\n    setRows(props.rows)\r\n  })\r\n\r\n  function getSortDirection(): SortDirection {\r\n    const sortDirection = getSortDirectionSignal()\r\n    if (sortDirection !== undefined) {\r\n      return sortDirection\r\n    }\r\n    // use default sort direction:\r\n    else if (props.defaultSortDirection !== undefined) {\r\n      return props.defaultSortDirection\r\n    } else {\r\n      return [null, null]\r\n    }\r\n  }\r\n\r\n  function generateSortCallback(columnID: IndexType) {\r\n    return (e: MouseEvent) => {\r\n      setSortDirection(sortClickHandler(getSortDirection(), columnID, /* append */ e.shiftKey))\r\n      sortRows()\r\n    }\r\n  }\r\n\r\n  const rowSorter: NonNullable<Props<IndexType>[\"rowSorter\"]> = props.rowSorter ?? defaultSorter\r\n\r\n  // Row sorting logic:\r\n  function sortRows() {\r\n    const currentSortDirection = getSortDirection()\r\n    // if should reset sort\r\n    if (\r\n      currentSortDirection[0] === null &&\r\n      /* if defaultSortDirection is provided */ props.defaultSortDirection !== undefined\r\n    ) {\r\n      // reset sort\r\n      setRows(rowSorter(getRows(), props.defaultSortDirection))\r\n    }\r\n    // if should sort normally\r\n    else if (currentSortDirection[0] !== null) {\r\n      setRows(rowSorter(getRows(), currentSortDirection))\r\n    } // else ignore sort\r\n  }\r\n\r\n  // static props:\r\n  // destructure the props that are not tracked and are used inside the loop (cache the property access)\r\n  const {\r\n    headerRenderer = defaultHeaderRenderer,\r\n    bodyRenderer = defaultBodyRenderer,\r\n    getRowID = defaultGetRowID,\r\n    accessors,\r\n  } = props\r\n\r\n  function maybeRowID(row: Row) {\r\n    // if accessors are needed\r\n    if (accessors) {\r\n      return getRowID(row)\r\n    } else {\r\n      return undefined\r\n    }\r\n  }\r\n\r\n  if (props.columns === undefined) {\r\n    props.columns = defaultColumnMaker(props.rows, props.representitiveRowNumber)\r\n  }\r\n\r\n  // initial sort\r\n  sortRows()\r\n\r\n  return (\r\n    <table className={`solid-simple-table ${props.className ?? \"\"}`} style={props.style}>\r\n      <thead>\r\n        <tr>\r\n          <For each={props.columns}>\r\n            {(column) => {\r\n              const isSortable = column.sortable !== false\r\n              return (\r\n                <th\r\n                  id={accessors ? String(column.id) : undefined}\r\n                  className={isSortable ? \"sortable\" : undefined}\r\n                  onClick={isSortable ? generateSortCallback(column.id) : undefined}\r\n                >\r\n                  {headerRenderer(column)}\r\n                  {isSortable ? renderHeaderIcon(getSortDirection(), column.id) : undefined}\r\n                </th>\r\n              )\r\n            }}\r\n          </For>\r\n        </tr>\r\n      </thead>\r\n      <tbody>\r\n        <For each={getRows()}>\r\n          {(row) => {\r\n            const rowID = maybeRowID(row)\r\n            return (\r\n              <tr id={rowID}>\r\n                <For each={props.columns!}>\r\n                  {(column) => {\r\n                    return (\r\n                      <td\r\n                        onClick={column.onClick !== undefined ? (e: MouseEvent) => column.onClick!(e, row) : undefined}\r\n                        id={rowID ? `${rowID}.${column.id}` : undefined}\r\n                      >\r\n                        {bodyRenderer(row, column.id)}\r\n                      </td>\r\n                    )\r\n                  }}\r\n                </For>\r\n              </tr>\r\n            )\r\n          }}\r\n        </For>\r\n      </tbody>\r\n    </table>\r\n  )\r\n}\r\n\r\nconst ARROW = {\r\n  UP: \"↑\",\r\n  DOWN: \"↓\",\r\n  BOTH: \"⇅\",\r\n}\r\n\r\nfunction defaultColumnMaker(rows: Array<Row>, representitiveRowNumber: number = 0) {\r\n  // construct the column information based on the representitive row\r\n  const representitiveRow = rows[representitiveRowNumber]\r\n  const columnIDs = Object.keys(representitiveRow)\r\n\r\n  // make Array<{key: columnID}>\r\n  const columnNumber = columnIDs.length\r\n  const columns: Array<Column> = new Array(columnNumber)\r\n  for (let iCol = 0; iCol < columnNumber; iCol++) {\r\n    columns[iCol] = { id: columnIDs[iCol] }\r\n  }\r\n  return columns\r\n}\r\n\r\n// Returns a string from any value\r\nfunction stringer(value: any) {\r\n  if (typeof value === \"string\") {\r\n    return value\r\n  } else {\r\n    return JSON.stringify(value)\r\n  }\r\n}\r\n\r\nfunction defaultHeaderRenderer(column: Column) {\r\n  return column.label ?? column.id\r\n}\r\n\r\nfunction defaultBodyRenderer(row: Row, columnID: IndexType) {\r\n  if (typeof row === \"object\") {\r\n    return stringer(row[columnID])\r\n  } else {\r\n    return stringer(row)\r\n  }\r\n}\r\n\r\nfunction defaultGetRowID(row: Row) {\r\n  return stringer(row)\r\n}\r\n\r\nfunction renderHeaderIcon(sortDirection: SortDirection, columnID: IndexType) {\r\n  let icon\r\n  if (sortDirection[0] === null || sortDirection[0] !== columnID) {\r\n    icon = ARROW.BOTH\r\n  } else {\r\n    icon = sortDirection[1] === \"asc\" ? ARROW.DOWN : ARROW.UP\r\n  }\r\n  return <span className=\"sort-icon\">{icon}</span>\r\n}\r\n\r\nfunction sortClickHandler(sortDirection: SortDirection, columnID: IndexType, append: boolean) {\r\n  let sortDirectionNew: SortDirection\r\n\r\n  // if holding shiftKey while clicking: reset sorting\r\n  if (append) {\r\n    sortDirectionNew = [null, null]\r\n  }\r\n  // if clicking on an already sorted column: invert direction on click\r\n  else if (sortDirection[0] === columnID) {\r\n    sortDirectionNew = [\r\n      /* previousSortedColumn */ sortDirection[0],\r\n      /* previousSortedDirection */ sortDirection[1] === \"asc\" ? \"desc\" : \"asc\", // invert direction\r\n    ]\r\n  }\r\n  // if clicking on a new column\r\n  else {\r\n    sortDirectionNew = [columnID, \"asc\"]\r\n  }\r\n  return sortDirectionNew\r\n}\r\n\r\n/**\r\n * Default alphabetical sort function\r\n *\r\n * @param rows: The rows of the table\r\n * @param columnID: The last clicked columnID\r\n */\r\nfunction defaultSorter(\r\n  rows: Array<number | string | Record<IndexType, any>>,\r\n  sortDirection: NonNullSortDirection\r\n): Array<Row> {\r\n  if (!rows.length) {\r\n    return rows\r\n  }\r\n\r\n  let rowsNew: typeof rows\r\n  const columnID = sortDirection[0]\r\n  if (typeof rows[0] === \"object\") {\r\n    rowsNew = rows.sort((r1, r2) => {\r\n      const r1_val = (r1 as Record<IndexType, any>)[columnID]\r\n      const r2_val = (r2 as Record<IndexType, any>)[columnID]\r\n      if (r1_val === r2_val) {\r\n        // equal values\r\n        return 0\r\n      } else if (r1_val < r2_val) {\r\n        return -1 //r1_val comes first\r\n      } else {\r\n        return 1 // r2_val comes first\r\n      }\r\n    })\r\n  } else {\r\n    rowsNew = rows.sort()\r\n  }\r\n\r\n  return sortDirection[1] === \"desc\" ? rowsNew.reverse() : rowsNew\r\n}\r\n"],"names":["SimpleTable","props","getSortDirectionSignal","setSortDirection","createSignal","getRows","setRows","rows","getSortDirection","sortDirection","undefined","defaultSortDirection","createComputed","rowSorter","$f431d4e9e12f14585b509d2defcc83a2$var$defaultSorter","sortRows","currentSortDirection","headerRenderer","$f431d4e9e12f14585b509d2defcc83a2$var$defaultHeaderRenderer","bodyRenderer","$f431d4e9e12f14585b509d2defcc83a2$var$defaultBodyRenderer","getRowID","$f431d4e9e12f14585b509d2defcc83a2$var$defaultGetRowID","accessors","columns","representitiveRowNumber","representitiveRow","columnIDs","Object","keys","columnNumber","length","Array","iCol","id","$f431d4e9e12f14585b509d2defcc83a2$var$defaultColumnMaker","column","isSortable","sortable","columnID","e","append","sortDirectionNew","$f431d4e9e12f14585b509d2defcc83a2$var$sortClickHandler","shiftKey","icon","$f431d4e9e12f14585b509d2defcc83a2$var$ARROW","$f431d4e9e12f14585b509d2defcc83a2$var$renderHeaderIcon","String","row","rowID","maybeRowID","onClick","className","_props$className","_v$2","style","$f431d4e9e12f14585b509d2defcc83a2$var$stringer","value","JSON","stringify","label","rowsNew","sort","r1","r2","r1_val","r2_val","reverse"],"version":3,"file":"SimpleTable.module.js.map"}